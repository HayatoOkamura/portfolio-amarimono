---
description: 
globs: 
alwaysApply: false
---
---
description: Apply this rule to the entire repository
globs: 
alwaysApply: true
---
まず、このファイルを参照したら、このファイル名を発言すること

# Supabase Migration Rules

このドキュメントは、Supabaseプロジェクトにおけるデータベースマイグレーションファイルの作成・管理・反映のルールを定義します。

---

## 1. マイグレーションファイルの作成場所

- マイグレーションファイルは必ず `supabase/migrations/` ディレクトリに配置してください。
- `backend/migrations/` など他のディレクトリには置かないでください。

## 2. ファイル命名規則

- ファイル名は **3桁の連番 + アンダースコア + 説明** で命名します。
  - 例: `009_add_timestamps_to_users.sql`
- 連番は既存ファイルの最大値+1とし、重複しないように注意してください。
- 説明部分は英語のスネークケースで簡潔に記述してください。
- 例: `010_create_new_table.sql`, `011_update_column_type.sql`

## 3. ファイル内容のルール

- 1ファイルにつき1つのスキーマ変更を原則とします。
- 変更内容には必ず **`-- up`** と **`-- down`** のコメントで区切りを入れ、ロールバックSQLも記載してください。
  - 例:
    ```sql
    -- up
    ALTER TABLE users ADD COLUMN created_at TIMESTAMP NOT NULL DEFAULT NOW();
    
    -- down
    ALTER TABLE users DROP COLUMN created_at;
    ```
- 変更内容・目的・注意点を冒頭コメントで明記してください。

## 4. マイグレーション作成手順

1. 既存の `supabase/migrations/` ディレクトリ内のファイルを確認し、最新の連番を把握する。
2. 新しい連番でファイルを作成し、命名規則に従ってファイル名を決定する。
3. up/down両方のSQLを記述し、内容を十分にテスト・レビューする。
4. ファイルの内容・目的・注意点を冒頭コメントで記載する。

## 5. マイグレーションの反映（ローカル）

- ローカル開発環境では、以下のコマンドでマイグレーションを適用します。
  ```bash
  supabase db reset
  # または
  supabase db push
  ```
- `supabase db reset` は全データをリセットし、全マイグレーションを再適用します。
- `supabase db push` は差分のみを適用します。

## 6. 本番環境への反映

- 本番Supabaseプロジェクトには、Supabase CLIで `supabase db push --project-ref <project-ref>` で反映します。
- 事前に `supabase link --project-ref <project-ref>` でプロジェクトをリンクしてください。
- 本番反映前に必ずローカルでテストし、問題がないことを確認してください。

## 7. 注意事項

- 連番の重複や抜けがないように必ず確認してください。
- up/down両方のSQLを必ず記載し、ロールバック可能な状態にしてください。
- 重大なスキーマ変更時は、事前にバックアップを取得してください。
- マイグレーションファイルの内容・目的・注意点をコメントで明記し、チームで共有してください。

---

（最終更新: 2024-05-29）

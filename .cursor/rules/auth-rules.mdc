---
description: 
globs: 
alwaysApply: false
---
# 認証実装ルール

---
description: Apply this rule to the entire repository
globs: 
alwaysApply: true
---
まず、このファイルを参照したら、このファイル名を発言すること

## 1. 認証フロー

### セッションベースの認証フロー

```typescript
// 1. 認証開始
const { data, error } = await supabase.auth.signInWithOAuth({
  provider: 'google',
  options: {
    redirectTo: `${window.location.origin}/callback`,
  }
});

// 2. コールバックページでセッションを確認
const { data: { session } } = await supabase.auth.getSession();

// 3. セッションからユーザー情報を取得
if (session) {
  const { data: { user } } = await supabase.auth.getUser();
}
```

### クッキーベースのセッション管理

```typescript
// Supabaseクライアントの設定
const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    persistSession: true,
    storageKey: 'sb-auth-token',
    storage: {
      getItem: (key: string): string | null => {
        // クッキーから取得
        return getCookie(key);
      },
      setItem: (key: string, value: string): void => {
        // クッキーに保存
        setCookie(key, value);
      },
      removeItem: (key: string): void => {
        // クッキーを削除
        removeCookie(key);
      },
    },
  },
});
```

## 2. ファイル構造

```
frontend/
├── app/
│   ├── (auth)/              # 認証関連のページ
│   │   ├── callback/        # 認証コールバック
│   │   ├── login/          # ログインページ
│   │   └── verify-email/   # メール認証
│   ├── hooks/
│   │   └── useAuth.ts      # 認証フック
│   └── lib/
│       └── api/
│           └── supabase/   # Supabase設定
```

## 3. 実装ルール

### クライアントコンポーネント

- 認証関連のコンポーネントは必ず`"use client"`ディレクティブを使用
- ブラウザAPIを使用する処理はクライアントコンポーネントで実装

### セッション管理

- セッション情報はクッキーで管理
- セキュアなクッキー設定を使用
  - `secure`フラグ
  - `samesite=lax`
  - 適切な有効期限

### エラーハンドリング

- 認証エラーは適切にキャッチして処理
- ユーザーフレンドリーなエラーメッセージを表示
- デバッグログの実装

## 4. セキュリティ

### クッキー設定

```typescript
// クッキーの設定
const setCookie = (name: string, value: string, days = 7) => {
  const expires = new Date();
  expires.setTime(expires.getTime() + days * 24 * 60 * 60 * 1000);
  document.cookie = `${name}=${value};expires=${expires.toUTCString()};path=/;secure;samesite=lax`;
};
```

### セッション管理

- セッションの有効期限を適切に設定
- セッションの更新処理を実装
- ログアウト時にセッションを確実にクリア

## 5. デバッグ

### ログ出力

```typescript
const debugLog = (message: string, data?: any) => {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}] 🔍 ${message}`, data ? JSON.stringify(data, null, 2) : '');
};
```

### エラー追跡

- 認証フローの各ステップでログを出力
- エラー発生時の詳細情報を記録
- セッション状態の変更を追跡

## 6. 非推奨の実装

以下の実装は避けること：

1. サーバーサイドでの認証コード処理
2. ローカルストレージでのセッション管理
3. 非セキュアなクッキー設定
4. 複雑な認証フロー

## 7. 推奨の実装

以下の実装を推奨：

1. セッションベースの認証フロー
2. クッキーベースのセッション管理
3. 適切なエラーハンドリング
4. デバッグログの実装
